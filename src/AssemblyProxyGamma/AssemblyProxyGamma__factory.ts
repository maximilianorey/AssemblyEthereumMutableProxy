/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../typechain/common";
import type {
  AssemblyProxyGamma,
  AssemblyProxyGammaInterface,
} from "./AssemblyProxyGamma";
import { EthereumException } from "../Exception/EthereumException";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "Upgraded",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "enum AssemblyProxyGamma.AdminFuctionGetType",
        name: "func",
        type: "uint8",
      },
    ],
    name: "adminFunctionsGet",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x7F22a5dde4000000000000000000000000000000000000000000000000000000006000527F0000000000000000000000000000000000000000000000000000000000000000600452600080602481807F00000000000000000000000000000000000000000000000000000000000000005AF17F00000000000000000000000000000000000000000000000000000000000000007FFFFFFFFFFFFFFFFFFFFFFFFFFFFFDCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE556103126000816100c18239F336610079575B7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFDCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE54600036818037803681845AF4610041573D6000803E3D6000FD5B7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFDCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE54036102a2573D61006f57005B3D6000803E3D6000F35B60003560E01C8063b0ee3ae7146101d157633659CFE6036005577F6e9960c300000000000000000000000000000000000000000000000000000000600052602060006024817F00000000000000000000000000000000000000000000000000000000000000005AFA60005133036005573461023257600435803B6101875760846000816101038239FD08c379a00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002d455243313936373a206e657720696d706c656d656e746174696f6e206973206e6f74206120636f6e7472616374000000000000000000000000000000000000005B807FFFFFFFFFFFFFFFFFFFFFFFFFFFFFDCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE557Fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080A2005B3461023257600435610208577FFFFFFFFFFFFFFFFFFFFFFFFFFFFFDCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE5460005260206000F35B7F000000000000000000000000000000000000000000000000000000000000000060005260206000F35B606460008161023e8239FD08c379a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000134e4f54205041594d454e5420414c4c4f574544000000000000000000000000005B60646000816102ae8239FD08c379a000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000013434f525255505445442052454749535445525300000000000000000000000000";

export class AssemblyProxyGamma__factory extends ContractFactory {
  constructor(admin: string, implementation: string, adminStorage: string, signer?: Signer) {
    let cAdmin = admin.startsWith("0x") ? admin.substring(2) : admin;
    let cImplementation = implementation.startsWith("0x") ? implementation.substring(2) : implementation;
    let cAdminStorage = adminStorage.startsWith("0x") ? adminStorage.substring(2) : adminStorage;

    if(!/^[0-9a-fA-F]+$/.test(cAdmin)){
      throw new EthereumException("ADMIN IS NOT A VALID HEX NUMBER");
    }

    if(cAdmin.length > 64 ){
      throw new EthereumException("ADMIN HAS WRONG LENGTH SHOULD BE 64 (32 BYTES) FOUND: " + cAdmin.length);
    }

    if(!/^[0-9a-fA-F]+$/.test(cImplementation)){
      throw new EthereumException("IMPLEMENTATION IS NOT A VALID HEX NUMBER");
    }

    if(cImplementation.length > 64){
      throw new EthereumException("IMPLEMENTATION HAS WRONG LENGTH SHOULD BE 64 (32 BYTES) FOUND: " + cImplementation.length);
    }

    if(!/^[0-9a-fA-F]+$/.test(cAdminStorage)){
      throw new EthereumException("ADMIN STORAGE ADDRESS IS NOT A VALID HEX NUMBER");
    }

    if(cAdminStorage.length > 64){
      throw new EthereumException("ADMIN STORAGE ADDRESS HAS WRONG LENGTH SHOULD BE 64 (32 BYTES) FOUND: " + cImplementation.length);
    }

    if(cAdmin.length !==64){
      cAdmin = '0'.repeat(64-cAdmin.length) + cAdmin;
    }

    if(cImplementation.length !==64){
      cImplementation = '0'.repeat(64-cImplementation.length) + cImplementation;
    }

    if(cAdminStorage.length !==64){
      cAdminStorage = '0'.repeat(64-cAdminStorage.length) + cAdminStorage;
    }

    const buffCode = Buffer.from(_bytecode);
    const adminCode = Buffer.from(cAdmin);
    const implementationCode = Buffer.from(cImplementation);
    const adminStorageCode = Buffer.from(cAdminStorage);
    adminCode.copy(buffCode,([38])[0]*2);
    implementationCode.copy(buffCode,([116])[0]*2);
    ([81,386,716]).map(x => adminStorageCode.copy(buffCode,x*2));
    super(_abi, buffCode.toString(), signer);
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      AssemblyProxyGamma & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): AssemblyProxyGamma__factory {
    return super.connect(runner) as AssemblyProxyGamma__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AssemblyProxyGammaInterface {
    return new Interface(_abi) as AssemblyProxyGammaInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): AssemblyProxyGamma {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as AssemblyProxyGamma;
  }
}
