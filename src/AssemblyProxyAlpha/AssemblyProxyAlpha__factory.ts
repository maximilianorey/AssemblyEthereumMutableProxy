/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../typechain/common";

import type { AssemblyProxyAlpha, AssemblyProxyAlphaInterface } from "./AssemblyProxyAlpha";
import { EthereumException } from '../Exception/EthereumException';

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address",
      },
    ],
    name: "AdminChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "Upgraded",
    type: "event",
  },
  {
    inputs: [],
    name: "admin",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newAdmin",
        type: "address",
      },
    ],
    name: "changeAdmin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "implementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

let _bytecode =
  "0x7F00000000000000000000000000000000000000000000000000000000000000007FFFFFFFFFFFFFFFFFFFFFFFFFDCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD557F00000000000000000000000000000000000000000000000000000000000000007FFFFFFFFFFFFFFFFFFFFFFFFFFFFFDCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE5561033e60008160918239F37FFFFFFFFFFFFFFFFFFFFFFFFFDCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD54803314610136575B36600080377FFFFFFFFFFFFFFFFFFFFFFFFFFFFFDCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE54600060003681845AF46066573D6000803E3D6000FD5B7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFDCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE54036100c6577FFFFFFFFFFFFFFFFFFFFFFFFFDCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD54036100c6573D620000bc57005B3D6000803E3D6000F35B60646000816100d28239FD08c379a000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000013434f5252555054454420524547495354455253000000000000000000000000005B60003560E01C80635C60DA1B146101b65780633659CFE6146101e657638F2839700361002957346102ce5760043580602052336000527FFFFFFFFFFFFFFFFFFFFFFFFFDCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD557F7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f60406000A1005B346102ce577FFFFFFFFFFFFFFFFFFFFFFFFFFFFFDCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE5460005260206000F35B346102ce57600435803B6102845760846000816102008239FD08c379a00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002d455243313936373a206e657720696d706c656d656e746174696f6e206973206e6f74206120636f6e7472616374000000000000000000000000000000000000005B807FFFFFFFFFFFFFFFFFFFFFFFFFFFFFDCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE557Fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080A2005B60646000816102da8239FD08c379a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000134e4f54205041594d454e5420414c4c4f57454400000000000000000000000000"

export class AssemblyProxyAlpha__factory extends ContractFactory {
  constructor(admin: string, implementation: string, signer?: Signer) {
      let cAdmin = admin.startsWith("0x") ? admin.substring(2) : admin;
      let cImplementation = implementation.startsWith("0x") ? implementation.substring(2) : implementation;

      if(!/^[0-9a-fA-F]+$/.test(cAdmin)){
        throw new EthereumException("ADMIN IS NOT A VALID HEX NUMBER");
      }

      if(cAdmin.length > 64 ){
        throw new EthereumException("ADMIN HAS WRONG LENGTH SHOULD BE 64 (32 BYTES) FOUND: " + cAdmin.length);
      }

      if(!/^[0-9a-fA-F]+$/.test(cImplementation)){
        throw new EthereumException("IMPLEMENTATION IS NOT A VALID HEX NUMBER");
      }

      if(cImplementation.length > 64){
        throw new EthereumException("IMPLEMENTATION HAS WRONG LENGTH SHOULD BE 64 (32 BYTES) FOUND: " + cImplementation.length);
      }

      if(cAdmin.length !==64){
        cAdmin = '0'.repeat(64-cAdmin.length) + cAdmin;
      }

      if(cImplementation.length !==64){
        cImplementation = '0'.repeat(64-cImplementation.length) + cImplementation;
      }

      const buffCode = Buffer.from(_bytecode);
      const adminCode = Buffer.from(cAdmin);
      const implementationCode = Buffer.from(cImplementation);
      adminCode.copy(buffCode,[2][0]*2);
      implementationCode.copy(buffCode,[69][0]*2);
      super(_abi, buffCode.toString(), signer);
    
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      AssemblyProxyAlpha & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): AssemblyProxyAlpha__factory {
    return super.connect(runner) as AssemblyProxyAlpha__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AssemblyProxyAlphaInterface {
    return new Interface(_abi) as AssemblyProxyAlphaInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): AssemblyProxyAlpha {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as AssemblyProxyAlpha;
  }
}
