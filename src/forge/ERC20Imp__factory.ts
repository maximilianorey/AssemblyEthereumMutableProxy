/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../typechain/common";
import type { ERC20Imp, ERC20ImpInterface } from "../typechain/contracts/ERC20Imp";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC20InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC20InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSpender",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "something",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561000f575f5ffd5b506040518060400160405280600581526020016448454c4c4f60d81b815250604051806040016040528060018152602001600960fb1b81525081600390816100579190610104565b5060046100648282610104565b5050506101be565b634e487b7160e01b5f52604160045260245ffd5b600181811c9082168061009457607f821691505b6020821081036100b257634e487b7160e01b5f52602260045260245ffd5b50919050565b601f8211156100ff57805f5260205f20601f840160051c810160208510156100dd5750805b601f840160051c820191505b818110156100fc575f81556001016100e9565b50505b505050565b81516001600160401b0381111561011d5761011d61006c565b6101318161012b8454610080565b846100b8565b6020601f821160018114610163575f831561014c5750848201515b5f19600385901b1c1916600184901b1784556100fc565b5f84815260208120601f198516915b828110156101925787850151825560209485019460019092019101610172565b50848210156101af57868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b610771806101cb5f395ff3fe608060405234801561000f575f5ffd5b50600436106100a6575f3560e01c806340c10f191161006e57806340c10f191461011f57806370a082311461013457806395d89b411461015c578063a7a0d53714610164578063a9059cbb14610185578063dd62ed3e14610198575f5ffd5b806306fdde03146100aa578063095ea7b3146100c857806318160ddd146100eb57806323b872dd146100fd578063313ce56714610110575b5f5ffd5b6100b26101d0565b6040516100bf91906105e1565b60405180910390f35b6100db6100d6366004610631565b610260565b60405190151581526020016100bf565b6002545b6040519081526020016100bf565b6100db61010b366004610659565b610279565b604051601281526020016100bf565b61013261012d366004610631565b61029c565b005b6100ef610142366004610693565b6001600160a01b03165f9081526020819052604090205490565b6100b26102aa565b60408051808201909152600581526448454c4c4f60d81b60208201526100b2565b6100db610193366004610631565b6102b9565b6100ef6101a63660046106b3565b6001600160a01b039182165f90815260016020908152604080832093909416825291909152205490565b6060600380546101df906106e4565b80601f016020809104026020016040519081016040528092919081815260200182805461020b906106e4565b80156102565780601f1061022d57610100808354040283529160200191610256565b820191905f5260205f20905b81548152906001019060200180831161023957829003601f168201915b5050505050905090565b5f3361026d8185856102c6565b60019150505b92915050565b5f336102868582856102d8565b610291858585610358565b506001949350505050565b6102a682826103b5565b5050565b6060600480546101df906106e4565b5f3361026d818585610358565b6102d383838360016103e9565b505050565b6001600160a01b038381165f908152600160209081526040808320938616835292905220545f198114610352578181101561034457604051637dc7a0d960e11b81526001600160a01b038416600482015260248101829052604481018390526064015b60405180910390fd5b61035284848484035f6103e9565b50505050565b6001600160a01b03831661038157604051634b637e8f60e11b81525f600482015260240161033b565b6001600160a01b0382166103aa5760405163ec442f0560e01b81525f600482015260240161033b565b6102d38383836104bb565b6001600160a01b0382166103de5760405163ec442f0560e01b81525f600482015260240161033b565b6102a65f83836104bb565b6001600160a01b0384166104125760405163e602df0560e01b81525f600482015260240161033b565b6001600160a01b03831661043b57604051634a1406b160e11b81525f600482015260240161033b565b6001600160a01b038085165f908152600160209081526040808320938716835292905220829055801561035257826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516104ad91815260200190565b60405180910390a350505050565b6001600160a01b0383166104e5578060025f8282546104da919061071c565b909155506105559050565b6001600160a01b0383165f90815260208190526040902054818110156105375760405163391434e360e21b81526001600160a01b0385166004820152602481018290526044810183905260640161033b565b6001600160a01b0384165f9081526020819052604090209082900390555b6001600160a01b0382166105715760028054829003905561058f565b6001600160a01b0382165f9081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516105d491815260200190565b60405180910390a3505050565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b80356001600160a01b038116811461062c575f5ffd5b919050565b5f5f60408385031215610642575f5ffd5b61064b83610616565b946020939093013593505050565b5f5f5f6060848603121561066b575f5ffd5b61067484610616565b925061068260208501610616565b929592945050506040919091013590565b5f602082840312156106a3575f5ffd5b6106ac82610616565b9392505050565b5f5f604083850312156106c4575f5ffd5b6106cd83610616565b91506106db60208401610616565b90509250929050565b600181811c908216806106f857607f821691505b60208210810361071657634e487b7160e01b5f52602260045260245ffd5b50919050565b8082018082111561027357634e487b7160e01b5f52601160045260245ffdfea26469706673582212201f97d95e8808201212fdf8f3a9c8ad734efd4125089c0746fa6533141ad9c47264736f6c634300081c0033";

type ERC20ImpConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20ImpConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20Imp__factory extends ContractFactory {
  constructor(...args: ERC20ImpConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ERC20Imp & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ERC20Imp__factory {
    return super.connect(runner) as ERC20Imp__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20ImpInterface {
    return new Interface(_abi) as ERC20ImpInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): ERC20Imp {
    return new Contract(address, _abi, runner) as unknown as ERC20Imp;
  }
}
